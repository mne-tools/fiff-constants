# Fiff tag dictionary (types)
#
# This is the complete type dictionary for fiff.
#
# Copyright Elekta Oy.
# All rights reserved.
#
# Syntax version 1.4
#
# $Revision: 1.24 $
# $Log: DictionaryTypes.txt,v $
# Revision 1.24  2018/07/02 05:19:30  jne
# Packing revision 1.4
#
# Revision 1.23  2016/09/05 12:50:08  jne
# added ref mags and grads for magnes, ctf, kit and babySQUID
#
# Revision 1.22  2016/09/02 09:43:55  jne
# added channel type for fnirs
# added sss_job_tproj, sss_job_xsss, sss_job_xsub, sss_job_xwav, sss_job_ncov, sss_job_scov
# added channels types for seeg and ecog
# added sensor types fnirs_hbo, fnirs_hbr
#
# Revision 1.21  2011/05/06 08:29:05  janne
# Checking in earlier updates.
#
# Revision 1.20  2010/08/25 10:48:38  janne
# void "No data"
#
# Revision 1.19  2010/04/22 12:03:42  janne
# Updated to be consistent with Framemaker document.
#
# Revision 1.18  2010/04/20 12:24:58  janne
# Changed ordering of enums.
#
# Revision 1.17  2010/04/20 10:37:55  janne
# Added point definitions.
#
# Revision 1.16  2010/04/20 09:57:36  janne
# Formatted for parser.
#
# Revision 1.15  2010/04/19 06:06:39  janne
# gantry_type added.
#
# Revision 1.14  2010/04/07 07:48:39  janne
# Added CTF's reference channel definition.
#
# Revision 1.13  2009/05/11 14:32:52  mjk
# Added long,ulong,complex_float,complex_double.
#
# Revision 1.12  2008/11/14 13:04:28  janne
# Added "unitless" unit.
#
# Revision 1.11  2008/01/25 13:30:20  jne
# Added stream_segment_struct
#
# Revision 1.10  2008/01/25 12:50:17  jne
# Added CTF_GRAD
#
# Revision 1.9  2007/11/20 07:38:02  jne
# Syntax version 1.2S
#
# Revision 1.8  2006/09/27 12:04:50  jne
# Corrected some typos
#
# Revision 1.7  2006/08/30 10:28:45  jne
# added definitions for dense_matrix, sparse_ccs_matrix,
# sparse_rcs_matrix, quat0...6, hpi_goodness, pi_error, hpi_movement,
# and sss_job options
#
# Revision 1.6  2006/04/27 07:30:07  mjk
# Minor cleanup
#
# Revision 1.5  2006/03/17 13:55:30  mjk
# Fixed name of pixel_encoding.
#
# Revision 1.4  2005/11/03  14:30:49  14:30:49  skesti (Sami Kesti)
# Renumbered candela
#
# Revision 1.3  2005/04/15  05:49:25  05:49:25  mjk (Matti Kajola)
# Added enum(diffusion_parm).
#
# Revision 1.2  2005/03/04 09:43:52  mjk
# Added volume_type (kandidate).
#
#======================================================================
#======================================================================
# Primitive types used as tag values.
#
#======================================================================

primitive(void)     0  "Nothing, do not try to use"
primitive(byte)     1  "1-byte unsigned char"
primitive(int16)    2  "Signed 2-byte integer"
primitive(int32)    3  "Signed 4-byte integer"
primitive(float)    4  "Single-precision 4-byte floating point number (IEEE)"
primitive(double)   5  "Double-precision 8-byte floating point number (IEEE)"
primitive(julian)   6  "Julian date, encoded using int32_t"
primitive(uint16)   7  "Unsigned 2-byte integer"
primitive(uint32)   8  "Unsigned 4-byte integer"
primitive(uint64)   9  "Unsigned 8-byte integer"
primitive(string)  10 "String in ISO 8859-1 character encoding"
primitive(int64)   11 "Signed 8-byte integer"

primitive(dau_pack13)   13 "HP proprietary data packing format (16 bits)"
primitive(dau_pack14)   14 "HP proprietary data packing format (16 bits)"
primitive(dau_pack16)   16 "Data buffer packing using 16 bit signed integers"

primitive(complex_float)  20 "Complex data with float encoding"
primitive(complex_double) 21 "Complex data with double encoding"
primitive(old_pack)       23 "Data packed with Neuromag proprietary 'old pack' scheme"

primitive(ch_info_struct)   30 "Structure describing measurement channel"
primitive(id_struct)        31 "Globally unique indentifier"
primitive(dir_entry_struct) 32 "FIFF directory entry structure"
primitive(dig_point_struct) 33 "Digitization point structure"
primitive(ch_pos_struct)    34 "Channel position structure"
primitive(coord_trans_struct)   35 "Coordinate transformation structure"
primitive(dig_string_struct)    36 "Digitization string structure"
primitive(stream_segment_struct) 37 "Data stream segment structure"

alias_type(ascii) string

#======================================================================
# Derived types
# These values are ORed with the primitive type to get the derived type
#======================================================================
#
# These are for matrices of any of the above
#

derived_type(matrix)            0x40000000
derived_type(dense_matrix)      0x00000000
derived_type(sparse_ccs_matrix) 0x00100000
derived_type(sparse_rcs_matrix) 0x00200000


#======================================================================
# Enumerated types used as tag values.
#
#======================================================================


enum(type) "FIFF data type (encoding)"
{
    void                  0  "No data"
    byte                  1  "Octet"
    short                 2  "Signed short int (16 bits)"
    int                   3  "Signed int (32 bits)"
    float                 4  "IEEE single precision floating point number"
    double                5  "IEEE double precision floating point number"
    julian                6  "Julian day (as 32 bit integer)"
    ushort                7  "Unsigned short int (16 bit)"
    uint                  8  "Unsigned int (32 bits)"
    string               10  "String in ISO 8859-1 coding"
    dau_pack13           13  "HP proprietary data packing format"
    dau_pack14           14  "HP proprietary data packing format"
    dau_pack16           16  "Data buffer packing using 16 bit signed integers"
    old_pack             23  "Data packed with Neuromag proprietary 'old pack' scheme"
    ch_info_struct       30  "Structure describing a measurement channel"
    id_struct            31  "This is a id1.1"
    dir_entry_struct     32  "FIFF directory entry structure"
    dig_point_struct     33  "Digitization point structure"
    ch_pos_struct        34  "Channel position structure"
    coord_trans_struct   35  "Coordinate transformation structure"
    dig_string_struct    36  "Digitization string structure"
    stream_segment_struct 37 "Data stream segment structure"
}


enum(unit) "FIFF value unit code"
{
    none     -1   "<No unit>"
    unitless  0   "unitless"
    m         1   "meter"
    kg        2   "kilogram"
    sec       3   "second"
    A         4   "ampere"
    K         5   "Kelvin"
    mol       6   "mole"
    rad       7   "radian"
    sr        8   "steradian"
    cd        9   "candela"
    mol_m3   10   "mol/m^3"
    Hz      101   "herz"
    N       102   "Newton"
    Pa      103   "pascal"
    J       104   "joule"
    W       105   "watt"
    C       106   "coulomb"
    V       107   "volt"
    F       108   "farad"
    Ohm     109   "ohm"
    Mho     110   "one per ohm"
    Wb      111   "weber"
    T       112   "tesla"
    H       113   "Henry"
    Cel     114   "celcius"
    lm      115   "lumen"
    lx      116   "lux"
    T_m     201   "T/m"
    Am      202   "Am"
    Am_m2   203   "Am/m^2"
    Am_m3   204   "Am/m^3"
}

enum(unitm) "FIFF value multipliers"
{
    e       18   "10^18"
    pet     15   "10^15"
    t       12   "10^12"
    gig      9   "10^9"
    meg      6   "10^6"
    k        3   "10^3"
    h        2   "10^2"
    da       1   "10^1"
    none     0   "10^0"
    d       -1   "10^-1"
    c       -2   "10^-2"
    m       -3   "10^-3"
    mu      -6   "10^-6"
    n       -9   "10^-9"
    p      -12   "10^-12"
    f      -15   "10^-15"
    a      -18   "10^-18"
}


enum(ch_type) "Type of the channel"
{
    magn              1   "MEG channel (magnetic channel)"
    el                2   "EEG channel (electric channel)"
    stim              3   "Stimulus channel"
    bio             102   "BIO channel"
    mcg             201   "MCG channel"
    eog             202   "EOG channel"
    magn_ref        301   "MEG reference channel (CTF type)"
    emg             302   "EMG channel"
    ecg             402   "ECG channel"
    misc            502   "Misc channel"
    resp            602   "Respiration monitoring"
    quat0           700   "Quaternion channel q0"
    quat1           701   "Quaternion channel q1"
    quat2           702   "Quaternion channel q2"
    quat3           703   "Quaternion channel q3"
    quat4           704   "Quaternion channel q4"
    quat5           705   "Quaternion channel q5"
    quat6           706   "Quaternion channel q6"
    hpi_goodness    707   "HPI fit goodness"
    hpi_error       708   "HPI fit error"
    hpi_movement    709   "HPI coil movement"
    seeg            802   "Stereo EEG channel"
    ecog            902   "Electrocorticogram channel"
    syst            900   "System state channel (for internal use)"
    ias             910   "Internal active shielding channel"
    exci            920   "Excitation channel"
    dipole_wave    1000   "Dipole time curve"
    goodness_fit   1001   "Goodness of fit"
    fnirs          1100   "Functional near-infrared spectroscopy"
}


enum(coil) "Sensor coil type"
{
    none                     0  "The location info contains no data"
    eeg                      1  "EEG electrode position in r0"
    nm_122                   2  "Neuromag 122 coils"
    nm_24                    3  "Old 24 channel system in HUT"
    nm_mcg_axial             4  "The axial devices in the HUCS MCG system"
    eeg_bipolar              5  "Bipolar EEG electrode position"
    dipole                 200  "Time-varying dipole definition. The coil info contains dipole location (r0) and direction (ex)"
    fnirs_hbo              300  "FNIRS oxyhemoglobin"
    fnirs_hbr              301  "FNIRS deoxyhemoglobin"
    mcg_42                1000  "For testing the MCG software"
    point_magnetometer    2000  "Simple point magnetometer"
    axial_grad_5cm        2001  "Generic axial gradiometer"
    point_magnetometer_x  2002  "Simple point magnetometer, x-direction"
    point_magnetometer_y  2003  "Simple point magnetometer, y-direction"
    vv_planar_w           3011  "VV prototype wirewound planar sensor"
    vv_planar_t1          3012  "Vectorview SQ20483N planar gradiometer"
    vv_planar_t2          3013  "Vectorview SQ20483N-A planar gradiometer"
    vv_planar_t3          3014  "Vectorview SQ20950N planar gradiometer"
    vv_planar_t4          3015  "MEG-MRI proto system planar gradiometer"
    vv_mag_w              3021  "VV prototype wirewound magnetometer"
    vv_mag_t1             3022  "Vectorview SQ20483N magnetometer"
    vv_mag_t2             3023  "Vectorview SQ20483-A magnetometer"
    vv_mag_t3             3024  "Vectorview SQ20950N magnetometer"
    vv_mag_t4             3025  "MEG-MRI proto system magnetometer"
    magnes_mag            4001  "Magnes WH magnetometer"
    magnes_grad           4002  "Magnes WH gradiometer"
    magnes_ref_mag        4003  "Magnes WH reference magnetometer"
    magnes_ref_gdia       4004  "Magnes WH diagonal reference gradiometer"
    magnes_ref_goff       4005  "Magnes WH offdiagonal reference gradiometer"
    ctf_grad              5001  "CTF axial gradiometer"
    ctf_ref_mag           5002  "CTF reference magnetometer"
    ctf_ref_grad          5003  "CTF reference gradiometer"
    ctf_ref_goff          5004  "CTF offdiagonal reference gradiometer"
    kit_grad              6001  "KIT gradiometer"
    kit_ref_mag           6002  "KIT reference magnetometer"
    baby_grad             7001  "Baby-SQUID gradiometer"
    baby_mag_inner        7002  "BabyMEG inner layer magnetometer"
    baby_mag_outer        7003  "BabyMEG outer layer magnetometer"
    baby_mag_ref          7004  "BabyMEG reference layer magnetometer"
    artemis123_grad       7501  "Artemis123 gradiometer"
    artemis123_ref_mag    7502  "Artemis123 reference magnetometer"
    artemis123_ref_grad   7503  "Artemis123 reference gradiometer"
    sample_tms_planar     8001  "Sample TMS sensor"
    kriss_grad            9001  "KRISS gradiometer"
}


enum(role) "Values for 'ref_role'; the role of a reference"
{
    prev_file   1   "Previous file"
    next_file   2   "Next file"
}


enum(next) "File pointers"
{
    none   -1   "None"
    seq     0   "Sequence"
}


enum(vol_type)  "Volume types used in FIFF_VOL_TYPE"
{
    hd            1   "Hard disk "
    mod           2   "Magneto-optical disk "
}


enum(dacq_system) "Describes the data acquisition system type"
{
    dau           0     "HP3582 DAU based Neruromag122 system."
    vxi           1     "VXI based Neuromag122 or mcg system."
    rpu           2     "RPU based Neuormag122 or Vectorview system."
    orion         3     "Orion based Vectorview."
    triux         4     "Elekta Neuromag TRIUX"
}

enum(gantry_type) "Describes the system gantry type"
{
    fixed       0   "Fixed gantry"
    uni_axial   1   "Uni-axial, rotation axis parallel to device y-axis"
    free        2   "Freely adjustable 5 degrees of freedom dewar"
}


enum(aspect) "Different aspects of data"
{
    average       100  "Normal average of epochs"
    std_err       101  "Std. error of mean"
    single        102  "Single epoch cut out from the continuous data"
    subaverage    103  "Partial average (subaverage)"
    altaverage    104  "Alternating subaverage"
    sample        105  "A sample cut out by graph"
    power_density 106  "Power density spectrum"
    dipole_wave   200  "Dipole amplitude curve"
    ifii_low     1100  "Lower bound of SQUID modulation (in I-PHI curves)"
    ifii_high    1101  "Higher bound of SQUID modulation (in I-PHI curves)"
    gate         1102  "Gate setting of SQUID"
}


bitmask32(hpi_accept) "How the HPI result was accepted"
{
    none       0      "Empty mask, HPI not accepted"
    program bit1      "The fit was accepted by the software"
    user    bit2      "The fit was accepted by user action"
}

enum(coord) "Coordinate type"
{
    unknown          0      "Unknown coordinate system"
    device           1      "MEG device coordinate system"
    isotrak          2      "3D Digitizer coordinate system"
    hpi              3      "Position indicator system coordinates"
    head             4      "Head coordinates, Elekta Neuromag convention"
    data_volume      5      "Coordinate system of the data volume"
    data_slice       6      "Coordinate system of a slice (e.g. MRI image)"
    data_display     7      "Coordinate system of the data display"
    dicom_device     8      "Coordinate system of the imaging device, DICOM convention"
    imaging_device   9      "Coordinate system of the structural imaging device"
    voxel_data       10     "Coordinate system of multidimensional voxel values"
    atlas_head       11     "Head coordinates of the atlas std head"
    torso            100    "Torso coordinates"
    tufts_eeg        300    "Tufts EEG coordinate system"
    ctf_device       1001   "CTF device coordinate system"
    ctf_head         1004   "CTF head coordinate system"
    mri_voxel        2001   "MRI voxel coordinates"
    ras              2002   "Surface RAS coordinates with non-zero origin"
    mni_tal          2003   "MNI Talairach coordinates"
    fs_tal_gtz       2004   "FreeSurfer Talairach (MNI z > 0) coordinates"
    fs_tal_ltz       2005   "FreeSurfer Talairach (MNI z < 0) coordinates"
    fs_tal           2006   "FreeSurfer Talairach coordinates"
}

enum(point) "Digitized point types"
{
    cardinal     1   "Cardinal point"
    hpi          2   "Head position indicator (HPI) coil"
    eeg          3   "EEG electrode"
    ecg          3   "ECG electrode"
    extra        4   "Extra point"
    head_surface 5   "Point on the surface of the head"
}

enum(cardinal_point) "Cardinal point types for brain data"
{
    lpa     1   "Left pre-auricular"
    nasion  2   "Nasion"
    rpa     3   "Right pre-auricular"
}

enum(cardinal_point_cardiac) "Cardinal point types for brain data"
{
    chest_left  1   "Left chest"
    sternum     2   "Sternum"
    chest_right 3   "Right chest"
}


enum(sex) "Sex of a subject/patient"
{
    unknown     0    "Unknown gender"
    male        1    "Male"
    female      2    "Female"
}


enum(hand) "Handedness of a subject/patient"
{
    right 1  "Righthanded"
    left  2  "Lefthanded"
}


enum(sss_job) "SSS job option"
{
    sss_job_nothing   0              "No SSS, just copy input to output"
    sss_job_ctc       1              "No SSS, only cross-talk correction"
    sss_job_filter    2              "Spatial maxwell filtering"
    sss_job_virt      3              "Transform data to another sensor array"
    sss_job_head_pos  4              "Estimate head positions, no SSS"
    sss_job_movec_fit 5              "Estimate and compensate head movement"
    sss_job_movec_qua 6              "Compensate head movement from previously estimated head positions"
    sss_job_rec_all   7              "Reconstruct inside and outside signals"
    sss_job_rec_in    8              "Reconstruct inside signals"
    sss_job_rec_out   9              "Reconstruct outside signals"
    sss_job_st       10              "Spatio-temporal maxwell filtering"
    sss_job_tproj    11              "Temporal projection, no SSS"
    sss_job_xsss     12              "Cross-validation SSS"
    sss_job_xsub     13              "Cross-validation subtraction, no SSS"
    sss_job_xwav     14              "Cross-validation noise waveforms"
    sss_job_ncov     15              "Noise covariance estimation"
    sss_job_scov     16              "SSS sample covariance estimation"
}


enum(proj_item) "What does a projection item represent"
{
    none         0   "Not known."
    field        1   "Magnetic field shape."
    dip_fix      2   "Fixed (in head coordinates) position dipole"
    dip_rot      3   "Rotating (in head coordinates) dipole"
    homog_grad   4   "Homogeneous gradient"
    homog_field  5   "Homogeneous fiels"
    eeg_avref   10   "Linear projection related to EEG average reference"
}

alias_type(xfit_proj_item) proj_item

enum(proj_by)  "Method by which a projection is defined (FIFF_PROJ_ITEM_DEFINITION)"
{
    complement     0   "Defined by the basis of the complement space"
    space          1   "Defined by the basis of the space itself"
}


enum(volume_type) "Type of a 3D volume data"
{
    unknown           0  "Not known"
    mri               1  "Normal structural MRI scan"
    angio             2  "Enhanced Angio MRI scan"
    spectroscopy      3  "MRI spectroscopy scan"
    bold              4  "Functional MRI image"
    diffusion         5  "Diffusion tensor volume"
    ct                6  "Computed tomography scan"
    segment_mask      7  "Segmentation mask"
    distance          8  "Voxel distance map"
    transform         9  "Transformation vectors"
    current_stat     10  "Current density statistical measure, strength, density, t_stat etc."
    conductivity     11  "Conductivity"
}



enum(mri_format) "Format of a volume data"
{
    unknown           0   "Unknown"
    magnetom_short    1   "Magnetom short"
    magnetom_long     2   "Magnetom long"
    merit             3   "Merit"
    signa             4   "Signa"
    pixel_raw         5   "Raw pixels"
    pixel_raw_packed  6   "Raw pixels packed"
    magnetom_new      7   "Magnetom new"
    fiff              8   "FIFF"
    acr_nema          9   "ACR NEMA"
    dicom_3          10   "DICOM 3"
    vista            11   "Vista"
}


enum(mri_pixel) "Pixel encoding in a volumetric image"
{
    unknown             0   "Unknown encoding"
    byte                1   "The pixels are unsigned bytes."
    word                2   "The pixels are unsigned shorts (2 bytes) in big-endian byte order."
    swap_word           3   "The pixels are unsigned shorts (2 bytes) in little-endian byte order."
    float               4   "The pixels are 4-byte IEEE floats."
    byte_indexed_color  5   "The pixels are indexes to a 8-bit color map."
    byte_rgb_color      6   "The pixels are represented by three byte values indicating the red, green, and blue intensities (0..255)."
    byte_rle_rgb_color  7   "RGB values with run-length enconding."
    bit_rle             8   "A run-length encoded bitmap. This will eventually be used for representation of segmentation regions."
    signed_word         9   "The pixels are signed shorts (2 bytes) in big-endian byte order."
    signed_swap_word    10  "The pixels are signed shorts (2 bytes) in little-endian byte order."
}

enum(diffusion_param)  "Diffusion parameter mapped in the volume, applicaple to diffusion tensor images"
{
    fa          1   "Fractional anisotropy"
    adc         2   "Apparent diffusion coefficient"
    linear      3   "Linear measure"
    planar      4   "Planar measure"
    spherical   5   "Spherical measure"
    eigen_max   6   "Maximum eigen value"
    comp_3      7   "First three eigenvalues"
    comp_3_fa   8   "First three eigenvalues scaled with fa"
    tensor_6    9   "Tensor value"
    other      15   "Other parameter"
}


alias_type(voxel_encoding) mri_pixel_encoding


enum(map_surf)  "Contours displayed on"
{
    sensors     0      "Sensor array surface"
    head        1      "Head surface"
    sphere      2      "Spherical surface"
}

enum(cond_model)  "Conductor model for"
{
    unknown     0      "Not known"
    sphere      1      "Spherically symmetric"
    bem_homog   2      "Homogeneous BEM model (single layer)"
    bem         3      "Multilayer BEM model"
}



enum(bem_surf_id) "What part does the surface represent"
{
    unknown2      -1   "Undefined"
    unknown        0   "Not known"
    brain          1   "Brain surface"
    csf            2   "Cerospinal fluid"
    skull          3   "Skull bone"
    head           4   "Scalp surface"
    blood         11   "Blood mass"
    heart         12   "Heart surface"
    lungs         13   "Lung surface"
    torso         14   "Thorax surface"
    nm122         21   "NM122 sensor array"
    unit_sphere   22   "Unit sphere"
    vv            23   "VectorView sensor array"
}

alias_type(seg_region_id) bem_surf_id

enum(bem_approx) "The approximation used in BEM modeling"
{
    const        1     "The constant potential approach"
    linear       2     "The linear potential approach"
}


#======================================================================
# Reserved for MNE estimates (MSH/MGH) In a separate file.
#======================================================================
